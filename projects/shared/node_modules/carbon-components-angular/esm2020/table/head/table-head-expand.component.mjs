import { Component, EventEmitter, HostBinding, Input, Output } from "@angular/core";
import * as i0 from "@angular/core";
import * as i1 from "carbon-components-angular/i18n";
import * as i2 from "@angular/common";
import * as i3 from "carbon-components-angular/icon";
export class TableHeadExpand {
    constructor(i18n) {
        this.i18n = i18n;
        this.hostClass = true;
        this.showExpandAllToggle = false;
        this.expanded = false;
        this.expandedChange = new EventEmitter();
        this._ariaLabel = this.i18n.getOverridable("TABLE.EXPAND_ALL_BUTTON");
    }
    get previousValue() {
        return this.expanded ? "collapsed" : null;
    }
    getAriaLabel() {
        return this._ariaLabel.subject;
    }
}
TableHeadExpand.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TableHeadExpand, deps: [{ token: i1.I18n }], target: i0.ɵɵFactoryTarget.Component });
TableHeadExpand.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: TableHeadExpand, selector: "[cdsTableHeadExpand], [ibmTableHeadExpand]", inputs: { showExpandAllToggle: "showExpandAllToggle", expanded: "expanded" }, outputs: { expandedChange: "expandedChange" }, host: { properties: { "class.cds--table-expand": "this.hostClass", "attr.data-previous-value": "this.previousValue" } }, ngImport: i0, template: `
		<button
			*ngIf="showExpandAllToggle"
			class="cds--table-expand__button"
			[attr.aria-label]="getAriaLabel() | async"
			(click)="expandedChange.emit(!expanded)">
			<svg cdsIcon="chevron--right" size="16" class="cds--table-expand__svg"></svg>
		</button>
		<ng-container *ngIf="!showExpandAllToggle">
			<ng-content></ng-content>
		</ng-container>
	`, isInline: true, dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.IconDirective, selector: "[cdsIcon], [ibmIcon]", inputs: ["ibmIcon", "cdsIcon", "size", "title", "ariaLabel", "ariaLabelledBy", "ariaHidden", "isFocusable"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TableHeadExpand, decorators: [{
            type: Component,
            args: [{
                    // tslint:disable-next-line: component-selector
                    selector: "[cdsTableHeadExpand], [ibmTableHeadExpand]",
                    template: `
		<button
			*ngIf="showExpandAllToggle"
			class="cds--table-expand__button"
			[attr.aria-label]="getAriaLabel() | async"
			(click)="expandedChange.emit(!expanded)">
			<svg cdsIcon="chevron--right" size="16" class="cds--table-expand__svg"></svg>
		</button>
		<ng-container *ngIf="!showExpandAllToggle">
			<ng-content></ng-content>
		</ng-container>
	`
                }]
        }], ctorParameters: function () { return [{ type: i1.I18n }]; }, propDecorators: { hostClass: [{
                type: HostBinding,
                args: ["class.cds--table-expand"]
            }], showExpandAllToggle: [{
                type: Input
            }], expanded: [{
                type: Input
            }], expandedChange: [{
                type: Output
            }], previousValue: [{
                type: HostBinding,
                args: ["attr.data-previous-value"]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtaGVhZC1leHBhbmQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3RhYmxlL2hlYWQvdGFibGUtaGVhZC1leHBhbmQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTixTQUFTLEVBQ1QsWUFBWSxFQUNaLFdBQVcsRUFDWCxLQUFLLEVBQ0wsTUFBTSxFQUNOLE1BQU0sZUFBZSxDQUFDOzs7OztBQW9CdkIsTUFBTSxPQUFPLGVBQWU7SUFlM0IsWUFBc0IsSUFBVTtRQUFWLFNBQUksR0FBSixJQUFJLENBQU07UUFkUSxjQUFTLEdBQUcsSUFBSSxDQUFDO1FBRWhELHdCQUFtQixHQUFHLEtBQUssQ0FBQztRQUU1QixhQUFRLEdBQUcsS0FBSyxDQUFDO1FBRWhCLG1CQUFjLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztRQU03QyxlQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUV2QyxDQUFDO0lBTnJDLElBQTZDLGFBQWE7UUFDekQsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUMzQyxDQUFDO0lBTUQsWUFBWTtRQUNYLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUM7SUFDaEMsQ0FBQzs7NEdBbkJXLGVBQWU7Z0dBQWYsZUFBZSx3VUFiakI7Ozs7Ozs7Ozs7O0VBV1Q7MkZBRVcsZUFBZTtrQkFoQjNCLFNBQVM7bUJBQUM7b0JBQ1YsK0NBQStDO29CQUMvQyxRQUFRLEVBQUUsNENBQTRDO29CQUN0RCxRQUFRLEVBQUU7Ozs7Ozs7Ozs7O0VBV1Q7aUJBQ0Q7MkZBRXdDLFNBQVM7c0JBQWhELFdBQVc7dUJBQUMseUJBQXlCO2dCQUU3QixtQkFBbUI7c0JBQTNCLEtBQUs7Z0JBRUcsUUFBUTtzQkFBaEIsS0FBSztnQkFFSSxjQUFjO3NCQUF2QixNQUFNO2dCQUVzQyxhQUFhO3NCQUF6RCxXQUFXO3VCQUFDLDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdENvbXBvbmVudCxcblx0RXZlbnRFbWl0dGVyLFxuXHRIb3N0QmluZGluZyxcblx0SW5wdXQsXG5cdE91dHB1dFxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgSTE4biB9IGZyb20gXCJjYXJib24tY29tcG9uZW50cy1hbmd1bGFyL2kxOG5cIjtcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwicnhqc1wiO1xuXG5AQ29tcG9uZW50KHtcblx0Ly8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBjb21wb25lbnQtc2VsZWN0b3Jcblx0c2VsZWN0b3I6IFwiW2Nkc1RhYmxlSGVhZEV4cGFuZF0sIFtpYm1UYWJsZUhlYWRFeHBhbmRdXCIsXG5cdHRlbXBsYXRlOiBgXG5cdFx0PGJ1dHRvblxuXHRcdFx0Km5nSWY9XCJzaG93RXhwYW5kQWxsVG9nZ2xlXCJcblx0XHRcdGNsYXNzPVwiY2RzLS10YWJsZS1leHBhbmRfX2J1dHRvblwiXG5cdFx0XHRbYXR0ci5hcmlhLWxhYmVsXT1cImdldEFyaWFMYWJlbCgpIHwgYXN5bmNcIlxuXHRcdFx0KGNsaWNrKT1cImV4cGFuZGVkQ2hhbmdlLmVtaXQoIWV4cGFuZGVkKVwiPlxuXHRcdFx0PHN2ZyBjZHNJY29uPVwiY2hldnJvbi0tcmlnaHRcIiBzaXplPVwiMTZcIiBjbGFzcz1cImNkcy0tdGFibGUtZXhwYW5kX19zdmdcIj48L3N2Zz5cblx0XHQ8L2J1dHRvbj5cblx0XHQ8bmctY29udGFpbmVyICpuZ0lmPVwiIXNob3dFeHBhbmRBbGxUb2dnbGVcIj5cblx0XHRcdDxuZy1jb250ZW50PjwvbmctY29udGVudD5cblx0XHQ8L25nLWNvbnRhaW5lcj5cblx0YFxufSlcbmV4cG9ydCBjbGFzcyBUYWJsZUhlYWRFeHBhbmQge1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5jZHMtLXRhYmxlLWV4cGFuZFwiKSBob3N0Q2xhc3MgPSB0cnVlO1xuXG5cdEBJbnB1dCgpIHNob3dFeHBhbmRBbGxUb2dnbGUgPSBmYWxzZTtcblxuXHRASW5wdXQoKSBleHBhbmRlZCA9IGZhbHNlO1xuXG5cdEBPdXRwdXQoKSBleHBhbmRlZENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuXHRASG9zdEJpbmRpbmcoXCJhdHRyLmRhdGEtcHJldmlvdXMtdmFsdWVcIikgZ2V0IHByZXZpb3VzVmFsdWUoKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXhwYW5kZWQgPyBcImNvbGxhcHNlZFwiIDogbnVsbDtcblx0fVxuXG5cdHByb3RlY3RlZCBfYXJpYUxhYmVsID0gdGhpcy5pMThuLmdldE92ZXJyaWRhYmxlKFwiVEFCTEUuRVhQQU5EX0FMTF9CVVRUT05cIik7XG5cblx0Y29uc3RydWN0b3IocHJvdGVjdGVkIGkxOG46IEkxOG4pIHsgfVxuXG5cdGdldEFyaWFMYWJlbCgpOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuXHRcdHJldHVybiB0aGlzLl9hcmlhTGFiZWwuc3ViamVjdDtcblx0fVxufVxuIl19