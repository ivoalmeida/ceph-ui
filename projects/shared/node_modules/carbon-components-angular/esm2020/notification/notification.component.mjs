import { Component, Input, HostBinding } from "@angular/core";
import { isObservable, of } from "rxjs";
import { BaseNotification } from "./base-notification.component";
import * as i0 from "@angular/core";
import * as i1 from "./notification-display.service";
import * as i2 from "carbon-components-angular/i18n";
import * as i3 from "@angular/common";
import * as i4 from "carbon-components-angular/icon";
import * as i5 from "./notification-title.directive";
import * as i6 from "./notification-subtitle.directive";
/**
 * Notification messages are displayed toward the top of the UI and do not interrupt user’s work.
 *
 * [See demo](../../?path=/story/components-notification--basic)
 */
export class Notification extends BaseNotification {
    constructor(notificationDisplayService, i18n) {
        super(notificationDisplayService, i18n);
        this.notificationDisplayService = notificationDisplayService;
        this.i18n = i18n;
        this.notificationID = `notification-${Notification.notificationCount++}`;
        this.notificationClass = true;
    }
    /**
     * Can have `type`, `title`, and `message` members.
     *
     * `type` can be one of `"error"`, `"info"`, `"info-square"`, `"warning"`, `"warning-alt"`, or `"success"`
     *
     * `message` is the message to display
     */
    get notificationObj() {
        return this._notificationObj;
    }
    set notificationObj(obj) {
        if (obj.closeLabel && !isObservable(obj.closeLabel)) {
            obj.closeLabel = of(obj.closeLabel);
        }
        this._notificationObj = Object.assign({}, this.defaultNotificationObj, obj);
    }
    get isError() { return this.notificationObj.type === "error"; }
    get isInfo() { return this.notificationObj.type === "info"; }
    get isInfoSquare() { return this.notificationObj.type === "info-square"; }
    get isSuccess() { return this.notificationObj.type === "success"; }
    get isWarning() { return this.notificationObj.type === "warning"; }
    get isWarningAlt() { return this.notificationObj.type === "warning-alt"; }
    get isLowContrast() { return this.notificationObj.lowContrast; }
    get isCloseHidden() { return !this.notificationObj.showClose; }
}
Notification.notificationCount = 0;
Notification.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: Notification, deps: [{ token: i1.NotificationDisplayService }, { token: i2.I18n }], target: i0.ɵɵFactoryTarget.Component });
Notification.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: Notification, selector: "cds-notification, cds-inline-notification, ibm-notification, ibm-inline-notification", inputs: { notificationObj: "notificationObj" }, host: { properties: { "attr.id": "this.notificationID", "class.cds--inline-notification": "this.notificationClass", "class.cds--inline-notification--error": "this.isError", "class.cds--inline-notification--info": "this.isInfo", "class.cds--inline-notification--info-square": "this.isInfoSquare", "class.cds--inline-notification--success": "this.isSuccess", "class.cds--inline-notification--warning": "this.isWarning", "class.cds--inline-notification--warning-alt": "this.isWarningAlt", "class.cds--inline-notification--low-contrast": "this.isLowContrast", "class.cds--inline-notification--hide-close-button": "this.isCloseHidden" } }, usesInheritance: true, ngImport: i0, template: `
		<div class="cds--inline-notification__details">
			<svg
				[cdsIcon]="iconDictionary[notificationObj.type]"
				size="20"
				*ngIf="notificationObj.type"
				class="cds--inline-notification__icon">
			</svg>
			<div class="cds--inline-notification__text-wrapper">
				<div *ngIf="!notificationObj.template" cdsNotificationTitle [innerHTML]="notificationObj.title"></div>
				<div *ngIf="!notificationObj.template" cdsNotificationSubtitle>
					<span [innerHTML]="notificationObj.message"></span>
				</div>
				<ng-container *ngTemplateOutlet="notificationObj.template; context: { $implicit: notificationObj}"></ng-container>
			</div>
		</div>
		<button
			*ngIf="!isCloseHidden"
			(click)="onClose()"
			class="cds--inline-notification__close-button"
			[attr.aria-label]="notificationObj.closeLabel | async"
			type="button">
			<svg cdsIcon="close" size="16" class="cds--inline-notification__close-icon"></svg>
		</button>
	`, isInline: true, dependencies: [{ kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i4.IconDirective, selector: "[cdsIcon], [ibmIcon]", inputs: ["ibmIcon", "cdsIcon", "size", "title", "ariaLabel", "ariaLabelledBy", "ariaHidden", "isFocusable"] }, { kind: "directive", type: i5.NotificationTitle, selector: "[cdsNotificationTitle], [ibmNotificationTitle]" }, { kind: "directive", type: i6.NotificationSubtitle, selector: "[cdsNotificationSubtitle], [ibmNotificationSubtitle]" }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: Notification, decorators: [{
            type: Component,
            args: [{
                    selector: "cds-notification, cds-inline-notification, ibm-notification, ibm-inline-notification",
                    template: `
		<div class="cds--inline-notification__details">
			<svg
				[cdsIcon]="iconDictionary[notificationObj.type]"
				size="20"
				*ngIf="notificationObj.type"
				class="cds--inline-notification__icon">
			</svg>
			<div class="cds--inline-notification__text-wrapper">
				<div *ngIf="!notificationObj.template" cdsNotificationTitle [innerHTML]="notificationObj.title"></div>
				<div *ngIf="!notificationObj.template" cdsNotificationSubtitle>
					<span [innerHTML]="notificationObj.message"></span>
				</div>
				<ng-container *ngTemplateOutlet="notificationObj.template; context: { $implicit: notificationObj}"></ng-container>
			</div>
		</div>
		<button
			*ngIf="!isCloseHidden"
			(click)="onClose()"
			class="cds--inline-notification__close-button"
			[attr.aria-label]="notificationObj.closeLabel | async"
			type="button">
			<svg cdsIcon="close" size="16" class="cds--inline-notification__close-icon"></svg>
		</button>
	`
                }]
        }], ctorParameters: function () { return [{ type: i1.NotificationDisplayService }, { type: i2.I18n }]; }, propDecorators: { notificationObj: [{
                type: Input
            }], notificationID: [{
                type: HostBinding,
                args: ["attr.id"]
            }], notificationClass: [{
                type: HostBinding,
                args: ["class.cds--inline-notification"]
            }], isError: [{
                type: HostBinding,
                args: ["class.cds--inline-notification--error"]
            }], isInfo: [{
                type: HostBinding,
                args: ["class.cds--inline-notification--info"]
            }], isInfoSquare: [{
                type: HostBinding,
                args: ["class.cds--inline-notification--info-square"]
            }], isSuccess: [{
                type: HostBinding,
                args: ["class.cds--inline-notification--success"]
            }], isWarning: [{
                type: HostBinding,
                args: ["class.cds--inline-notification--warning"]
            }], isWarningAlt: [{
                type: HostBinding,
                args: ["class.cds--inline-notification--warning-alt"]
            }], isLowContrast: [{
                type: HostBinding,
                args: ["class.cds--inline-notification--low-contrast"]
            }], isCloseHidden: [{
                type: HostBinding,
                args: ["class.cds--inline-notification--hide-close-button"]
            }] } });
//# sourceMappingURL=data:application/json;base64,