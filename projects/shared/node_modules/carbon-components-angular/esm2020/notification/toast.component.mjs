import { Component, Input, HostBinding } from "@angular/core";
import { isObservable, of } from "rxjs";
import { BaseNotification } from "./base-notification.component";
import * as i0 from "@angular/core";
import * as i1 from "./notification-display.service";
import * as i2 from "carbon-components-angular/i18n";
import * as i3 from "@angular/common";
import * as i4 from "carbon-components-angular/icon";
import * as i5 from "./toast-title.directive";
import * as i6 from "./toast-subtitle.directive";
import * as i7 from "./toast-caption.directive";
/**
 * Toast messages are displayed toward the top of the UI and do not interrupt user’s work.
 *
 * [See demo](../../?path=/story/components-notification--toast)
 */
export class Toast extends BaseNotification {
    constructor(notificationDisplayService, i18n) {
        super(notificationDisplayService, i18n);
        this.notificationDisplayService = notificationDisplayService;
        this.i18n = i18n;
        this.toastID = `toast-${Toast.toastCount++}`;
        this.toastClass = true;
    }
    /**
     * Can have `type`, `title`, `subtitle`, and `caption` members.
     *
     * `type` can be one of `"error"`, `"info"`, `"info-square"`, `"warning"`, `"warning-alt"`, or `"success"`
     */
    set notificationObj(obj) {
        if (obj.closeLabel && !isObservable(obj.closeLabel)) {
            obj.closeLabel = of(obj.closeLabel);
        }
        this._notificationObj = Object.assign({}, this.defaultNotificationObj, obj);
    }
    get notificationObj() {
        return this._notificationObj;
    }
    get isError() { return this.notificationObj.type === "error"; }
    get isInfo() { return this.notificationObj.type === "info"; }
    get isInfoSquare() { return this.notificationObj.type === "info-square"; }
    get isSuccess() { return this.notificationObj.type === "success"; }
    get isWarning() { return this.notificationObj.type === "warning"; }
    get isWarningAlt() { return this.notificationObj.type === "warning-alt"; }
    get isLowContrast() { return this.notificationObj.lowContrast; }
    get isCloseHidden() { return !this.notificationObj.showClose; }
    ngOnInit() {
        if (!this.notificationObj.closeLabel) {
            this.notificationObj.closeLabel = this.i18n.get().NOTIFICATION.CLOSE_BUTTON;
        }
    }
}
Toast.toastCount = 0;
Toast.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: Toast, deps: [{ token: i1.NotificationDisplayService }, { token: i2.I18n }], target: i0.ɵɵFactoryTarget.Component });
Toast.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: Toast, selector: "cds-toast, ibm-toast", inputs: { notificationObj: "notificationObj" }, host: { properties: { "attr.id": "this.toastID", "class.cds--toast-notification": "this.toastClass", "class.cds--toast-notification--error": "this.isError", "class.cds--toast-notification--info": "this.isInfo", "class.cds--toast-notification--info-square": "this.isInfoSquare", "class.cds--toast-notification--success": "this.isSuccess", "class.cds--toast-notification--warning": "this.isWarning", "class.cds--toast-notification--warning-alt": "this.isWarningAlt", "class.cds--toast-notification--low-contrast": "this.isLowContrast", "class.cds--toast-notification--hide-close-button": "this.isCloseHidden" } }, usesInheritance: true, ngImport: i0, template: `
		<svg
			[cdsIcon]="iconDictionary[notificationObj.type]"
			size="20"
			*ngIf="notificationObj.type"
			class="cds--toast-notification__icon">
		</svg>
		<div class="cds--toast-notification__details">
			<h3 *ngIf="!notificationObj.template" cdsToastTitle [innerHTML]="notificationObj.title"></h3>
			<div *ngIf="!notificationObj.template" cdsToastSubtitle>
				<span [innerHTML]="notificationObj.subtitle"></span>
			</div>
			<p *ngIf="!notificationObj.template" cdsToastCaption [innerHTML]="notificationObj.caption"></p>
			<ng-container *ngTemplateOutlet="notificationObj.template; context: { $implicit: notificationObj }"></ng-container>
		</div>
		<button
			*ngIf="!isCloseHidden"
			class="cds--toast-notification__close-button"
			type="button"
			[attr.aria-label]="notificationObj.closeLabel | async"
			(click)="onClose()">
			<svg cdsIcon="close" size="16" class="cds--toast-notification__close-icon"></svg>
		</button>
	`, isInline: true, dependencies: [{ kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i4.IconDirective, selector: "[cdsIcon], [ibmIcon]", inputs: ["ibmIcon", "cdsIcon", "size", "title", "ariaLabel", "ariaLabelledBy", "ariaHidden", "isFocusable"] }, { kind: "directive", type: i5.ToastTitle, selector: "[cdsToastTitle], [ibmToastTitle]" }, { kind: "directive", type: i6.ToastSubtitle, selector: "[cdsToastSubtitle], [ibmToastSubtitle]" }, { kind: "directive", type: i7.ToastCaption, selector: "[cdsToastCaption], [ibmToastCaption]" }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: Toast, decorators: [{
            type: Component,
            args: [{
                    selector: "cds-toast, ibm-toast",
                    template: `
		<svg
			[cdsIcon]="iconDictionary[notificationObj.type]"
			size="20"
			*ngIf="notificationObj.type"
			class="cds--toast-notification__icon">
		</svg>
		<div class="cds--toast-notification__details">
			<h3 *ngIf="!notificationObj.template" cdsToastTitle [innerHTML]="notificationObj.title"></h3>
			<div *ngIf="!notificationObj.template" cdsToastSubtitle>
				<span [innerHTML]="notificationObj.subtitle"></span>
			</div>
			<p *ngIf="!notificationObj.template" cdsToastCaption [innerHTML]="notificationObj.caption"></p>
			<ng-container *ngTemplateOutlet="notificationObj.template; context: { $implicit: notificationObj }"></ng-container>
		</div>
		<button
			*ngIf="!isCloseHidden"
			class="cds--toast-notification__close-button"
			type="button"
			[attr.aria-label]="notificationObj.closeLabel | async"
			(click)="onClose()">
			<svg cdsIcon="close" size="16" class="cds--toast-notification__close-icon"></svg>
		</button>
	`
                }]
        }], ctorParameters: function () { return [{ type: i1.NotificationDisplayService }, { type: i2.I18n }]; }, propDecorators: { notificationObj: [{
                type: Input
            }], toastID: [{
                type: HostBinding,
                args: ["attr.id"]
            }], toastClass: [{
                type: HostBinding,
                args: ["class.cds--toast-notification"]
            }], isError: [{
                type: HostBinding,
                args: ["class.cds--toast-notification--error"]
            }], isInfo: [{
                type: HostBinding,
                args: ["class.cds--toast-notification--info"]
            }], isInfoSquare: [{
                type: HostBinding,
                args: ["class.cds--toast-notification--info-square"]
            }], isSuccess: [{
                type: HostBinding,
                args: ["class.cds--toast-notification--success"]
            }], isWarning: [{
                type: HostBinding,
                args: ["class.cds--toast-notification--warning"]
            }], isWarningAlt: [{
                type: HostBinding,
                args: ["class.cds--toast-notification--warning-alt"]
            }], isLowContrast: [{
                type: HostBinding,
                args: ["class.cds--toast-notification--low-contrast"]
            }], isCloseHidden: [{
                type: HostBinding,
                args: ["class.cds--toast-notification--hide-close-button"]
            }] } });
//# sourceMappingURL=data:application/json;base64,