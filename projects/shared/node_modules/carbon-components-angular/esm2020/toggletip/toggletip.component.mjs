import { ChangeDetectionStrategy, Component, ContentChild, ElementRef, HostBinding, HostListener, Input } from "@angular/core";
import { fromEvent } from "rxjs";
import { PopoverContainer } from "carbon-components-angular/popover";
import { ToggletipButton } from "./toggletip-button.directive";
import * as i0 from "@angular/core";
import * as i1 from "carbon-components-angular/popover";
/**
 * Get started with importing the module:
 *
 * ```typescript
 * import { ToggletipModule } from 'carbon-components-angular';
 * ```
 *
 * [See demo](../../?path=/story/components-toggletip--basic)
 */
export class Toggletip extends PopoverContainer {
    constructor(hostElement, ngZone, renderer, changeDetectorRef) {
        super(hostElement, ngZone, renderer, changeDetectorRef);
        this.hostElement = hostElement;
        this.ngZone = ngZone;
        this.renderer = renderer;
        this.changeDetectorRef = changeDetectorRef;
        this.id = `tooltip-${Toggletip.toggletipCounter++}`;
        this.toggletipClass = true;
        this.isOpen = false;
        this.documentClick = this.handleFocusOut.bind(this);
        this.highContrast = true;
        this.dropShadow = false;
    }
    ngAfterViewInit() {
        this.initializeReferences();
        // Listen for click events on trigger
        this.subscription = fromEvent(this.btn.nativeElement, "click")
            .subscribe((event) => {
            // Add/Remove event listener based on isOpen to improve performance when there
            // are a lot of toggletips
            if (this.isOpen) {
                document.removeEventListener("click", this.documentClick);
            }
            else {
                document.addEventListener("click", this.documentClick);
            }
            this.handleExpansion(!this.isOpen, event);
        });
        // Toggletip is open on initial render, add 'click' event listener to document so users can close
        if (this.isOpen) {
            document.addEventListener("click", this.documentClick);
        }
        if (this.btn) {
            this.renderer.setAttribute(this.btn.nativeElement, "aria-controls", this.id);
        }
    }
    hostkeys(event) {
        if (open && event.key === "Escape") {
            event.stopPropagation();
            this.handleExpansion(false, event);
        }
    }
    handleFocusOut(event) {
        if (!this.hostElement.nativeElement.contains(event.target)) {
            this.handleExpansion(false, event);
        }
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    handleExpansion(state = false, event) {
        this.handleChange(state, event);
        if (this.btn) {
            this.renderer.setAttribute(this.btn.nativeElement, "aria-expanded", this.isOpen.toString());
        }
    }
}
Toggletip.toggletipCounter = 0;
Toggletip.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: Toggletip, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
Toggletip.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: Toggletip, selector: "cds-toggletip, ibm-toggletip", inputs: { id: "id", isOpen: "isOpen" }, host: { listeners: { "keyup": "hostkeys($event)" }, properties: { "class.cds--toggletip": "this.toggletipClass", "class.cds--toggletip--open": "this.isOpen" } }, queries: [{ propertyName: "btn", first: true, predicate: ToggletipButton, descendants: true, read: ElementRef }], usesInheritance: true, ngImport: i0, template: `
		<ng-content select="[cdsToggletipButton]"></ng-content>
		<cds-popover-content>
			<ng-content select="[cdsToggletipContent]"></ng-content>
		</cds-popover-content>
	`, isInline: true, dependencies: [{ kind: "component", type: i1.PopoverContent, selector: "cds-popover-content, ibm-popover-content" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: Toggletip, decorators: [{
            type: Component,
            args: [{
                    selector: "cds-toggletip, ibm-toggletip",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: `
		<ng-content select="[cdsToggletipButton]"></ng-content>
		<cds-popover-content>
			<ng-content select="[cdsToggletipContent]"></ng-content>
		</cds-popover-content>
	`
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { id: [{
                type: Input
            }], toggletipClass: [{
                type: HostBinding,
                args: ["class.cds--toggletip"]
            }], isOpen: [{
                type: HostBinding,
                args: ["class.cds--toggletip--open"]
            }, {
                type: Input
            }], btn: [{
                type: ContentChild,
                args: [ToggletipButton, { read: ElementRef }]
            }], hostkeys: [{
                type: HostListener,
                args: ["keyup", ["$event"]]
            }] } });
//# sourceMappingURL=data:application/json;base64,