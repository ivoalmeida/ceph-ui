import { Component, Output, EventEmitter, HostBinding, Input } from "@angular/core";
import { Tag } from "./tag.component";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "carbon-components-angular/icon";
export class TagFilter extends Tag {
    constructor() {
        super(...arguments);
        this.closeButtonLabel = "Clear Filter";
        this.disabled = false;
        /**
         * Function for close/delete the tag
         */
        this.close = new EventEmitter();
        /**
         * We need to stop the immedate propagation of click on the close button
         * to prevent undesired effects when used within dialogs.
         *
         * We need to emit a click event on close to allow for clicks to be listened
         * to on the immediate close button element. `action` distinguishes between clicks on
         * the tag vs. clicks on the close button.
         */
        this.click = new EventEmitter();
    }
    onClick(event) {
        event.stopImmediatePropagation();
        if (!this.disabled) {
            this.click.emit({ action: "click" });
        }
    }
    onClose(event) {
        event.stopImmediatePropagation();
        this.click.emit({ action: "close" });
        this.close.emit();
    }
    /**
     * @todo
     * Remove `cds--tag--${this.size}` in v7
     */
    get attrClass() {
        const disabledClass = this.disabled ? "cds--tag--disabled" : "";
        const sizeClass = `cds--tag--${this.size} cds--layout--size-${this.size}`;
        const skeletonClass = this.skeleton ? "cds--skeleton" : "";
        return `cds--tag cds--tag--filter cds--tag--${this.type} ${disabledClass} ${sizeClass} ${skeletonClass} ${this.class}`;
    }
    get attrAriaLabel() {
        return `${this.title || ""} ${this.closeButtonLabel}`.trim();
    }
}
TagFilter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TagFilter, deps: null, target: i0.ɵɵFactoryTarget.Component });
TagFilter.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: TagFilter, selector: "cds-tag-filter, ibm-tag-filter", inputs: { closeButtonLabel: "closeButtonLabel", disabled: "disabled", title: "title" }, outputs: { close: "close", click: "click" }, host: { properties: { "attr.class": "this.attrClass", "attr.aria-label": "this.attrAriaLabel" } }, usesInheritance: true, ngImport: i0, template: `
		<ng-container *ngIf="!skeleton">
			<ng-content select="[cdsTagIcon],[ibmTagIcon]"></ng-content>
			<span
				class="cds--tag__label"
				[attr.title]="title ? title : null"
				(click)="onClick($event)">
				<ng-content></ng-content>
			</span>
			<button
				class="cds--tag__close-icon"
				(click)="onClose($event)"
				[disabled]="disabled"
				[title]="closeButtonLabel">
				<span class="cds--visually-hidden">{{closeButtonLabel}}</span>
				<svg cdsIcon="close" size="16"></svg>
			</button>
		</ng-container>
	`, isInline: true, dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.IconDirective, selector: "[cdsIcon], [ibmIcon]", inputs: ["ibmIcon", "cdsIcon", "size", "title", "ariaLabel", "ariaLabelledBy", "ariaHidden", "isFocusable"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TagFilter, decorators: [{
            type: Component,
            args: [{
                    selector: "cds-tag-filter, ibm-tag-filter",
                    template: `
		<ng-container *ngIf="!skeleton">
			<ng-content select="[cdsTagIcon],[ibmTagIcon]"></ng-content>
			<span
				class="cds--tag__label"
				[attr.title]="title ? title : null"
				(click)="onClick($event)">
				<ng-content></ng-content>
			</span>
			<button
				class="cds--tag__close-icon"
				(click)="onClose($event)"
				[disabled]="disabled"
				[title]="closeButtonLabel">
				<span class="cds--visually-hidden">{{closeButtonLabel}}</span>
				<svg cdsIcon="close" size="16"></svg>
			</button>
		</ng-container>
	`
                }]
        }], propDecorators: { closeButtonLabel: [{
                type: Input
            }], disabled: [{
                type: Input
            }], title: [{
                type: Input
            }], close: [{
                type: Output
            }], click: [{
                type: Output
            }], attrClass: [{
                type: HostBinding,
                args: ["attr.class"]
            }], attrAriaLabel: [{
                type: HostBinding,
                args: ["attr.aria-label"]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnLWZpbHRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdGFnL3RhZy1maWx0ZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTixTQUFTLEVBQ1QsTUFBTSxFQUNOLFlBQVksRUFDWixXQUFXLEVBQ1gsS0FBSyxFQUVMLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7OztBQXdCdEMsTUFBTSxPQUFPLFNBQVUsU0FBUSxHQUFHO0lBdEJsQzs7UUF1QlUscUJBQWdCLEdBQUcsY0FBYyxDQUFDO1FBQ2xDLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFHMUI7O1dBRUc7UUFDTyxVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUUxQzs7Ozs7OztXQU9HO1FBQ08sVUFBSyxHQUFHLElBQUksWUFBWSxFQUFpQyxDQUFDO0tBOEJwRTtJQTVCQSxPQUFPLENBQUMsS0FBVTtRQUNqQixLQUFLLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztRQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNuQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1NBQ3JDO0lBQ0YsQ0FBQztJQUVELE9BQU8sQ0FBQyxLQUFVO1FBQ2pCLEtBQUssQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsSUFBK0IsU0FBUztRQUN2QyxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ2hFLE1BQU0sU0FBUyxHQUFHLGFBQWEsSUFBSSxDQUFDLElBQUksc0JBQXNCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUMxRSxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUUzRCxPQUFPLHVDQUF1QyxJQUFJLENBQUMsSUFBSSxJQUFJLGFBQWEsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN4SCxDQUFDO0lBRUQsSUFBb0MsYUFBYTtRQUNoRCxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssSUFBSSxFQUFFLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDOUQsQ0FBQzs7c0dBL0NXLFNBQVM7MEZBQVQsU0FBUyxxVUFwQlg7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQWtCVDsyRkFFVyxTQUFTO2tCQXRCckIsU0FBUzttQkFBQztvQkFDVixRQUFRLEVBQUUsZ0NBQWdDO29CQUMxQyxRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQWtCVDtpQkFDRDs4QkFFUyxnQkFBZ0I7c0JBQXhCLEtBQUs7Z0JBQ0csUUFBUTtzQkFBaEIsS0FBSztnQkFDRyxLQUFLO3NCQUFiLEtBQUs7Z0JBS0ksS0FBSztzQkFBZCxNQUFNO2dCQVVHLEtBQUs7c0JBQWQsTUFBTTtnQkFtQndCLFNBQVM7c0JBQXZDLFdBQVc7dUJBQUMsWUFBWTtnQkFRVyxhQUFhO3NCQUFoRCxXQUFXO3VCQUFDLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdENvbXBvbmVudCxcblx0T3V0cHV0LFxuXHRFdmVudEVtaXR0ZXIsXG5cdEhvc3RCaW5kaW5nLFxuXHRJbnB1dCxcblx0VGVtcGxhdGVSZWZcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IFRhZyB9IGZyb20gXCIuL3RhZy5jb21wb25lbnRcIjtcblxuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiBcImNkcy10YWctZmlsdGVyLCBpYm0tdGFnLWZpbHRlclwiLFxuXHR0ZW1wbGF0ZTogYFxuXHRcdDxuZy1jb250YWluZXIgKm5nSWY9XCIhc2tlbGV0b25cIj5cblx0XHRcdDxuZy1jb250ZW50IHNlbGVjdD1cIltjZHNUYWdJY29uXSxbaWJtVGFnSWNvbl1cIj48L25nLWNvbnRlbnQ+XG5cdFx0XHQ8c3BhblxuXHRcdFx0XHRjbGFzcz1cImNkcy0tdGFnX19sYWJlbFwiXG5cdFx0XHRcdFthdHRyLnRpdGxlXT1cInRpdGxlID8gdGl0bGUgOiBudWxsXCJcblx0XHRcdFx0KGNsaWNrKT1cIm9uQ2xpY2soJGV2ZW50KVwiPlxuXHRcdFx0XHQ8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG5cdFx0XHQ8L3NwYW4+XG5cdFx0XHQ8YnV0dG9uXG5cdFx0XHRcdGNsYXNzPVwiY2RzLS10YWdfX2Nsb3NlLWljb25cIlxuXHRcdFx0XHQoY2xpY2spPVwib25DbG9zZSgkZXZlbnQpXCJcblx0XHRcdFx0W2Rpc2FibGVkXT1cImRpc2FibGVkXCJcblx0XHRcdFx0W3RpdGxlXT1cImNsb3NlQnV0dG9uTGFiZWxcIj5cblx0XHRcdFx0PHNwYW4gY2xhc3M9XCJjZHMtLXZpc3VhbGx5LWhpZGRlblwiPnt7Y2xvc2VCdXR0b25MYWJlbH19PC9zcGFuPlxuXHRcdFx0XHQ8c3ZnIGNkc0ljb249XCJjbG9zZVwiIHNpemU9XCIxNlwiPjwvc3ZnPlxuXHRcdFx0PC9idXR0b24+XG5cdFx0PC9uZy1jb250YWluZXI+XG5cdGBcbn0pXG5leHBvcnQgY2xhc3MgVGFnRmlsdGVyIGV4dGVuZHMgVGFnIHtcblx0QElucHV0KCkgY2xvc2VCdXR0b25MYWJlbCA9IFwiQ2xlYXIgRmlsdGVyXCI7XG5cdEBJbnB1dCgpIGRpc2FibGVkID0gZmFsc2U7XG5cdEBJbnB1dCgpIHRpdGxlOiBzdHJpbmc7XG5cblx0LyoqXG5cdCAqIEZ1bmN0aW9uIGZvciBjbG9zZS9kZWxldGUgdGhlIHRhZ1xuXHQgKi9cblx0QE91dHB1dCgpIGNsb3NlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cblx0LyoqXG5cdCAqIFdlIG5lZWQgdG8gc3RvcCB0aGUgaW1tZWRhdGUgcHJvcGFnYXRpb24gb2YgY2xpY2sgb24gdGhlIGNsb3NlIGJ1dHRvblxuXHQgKiB0byBwcmV2ZW50IHVuZGVzaXJlZCBlZmZlY3RzIHdoZW4gdXNlZCB3aXRoaW4gZGlhbG9ncy5cblx0ICpcblx0ICogV2UgbmVlZCB0byBlbWl0IGEgY2xpY2sgZXZlbnQgb24gY2xvc2UgdG8gYWxsb3cgZm9yIGNsaWNrcyB0byBiZSBsaXN0ZW5lZFxuXHQgKiB0byBvbiB0aGUgaW1tZWRpYXRlIGNsb3NlIGJ1dHRvbiBlbGVtZW50LiBgYWN0aW9uYCBkaXN0aW5ndWlzaGVzIGJldHdlZW4gY2xpY2tzIG9uXG5cdCAqIHRoZSB0YWcgdnMuIGNsaWNrcyBvbiB0aGUgY2xvc2UgYnV0dG9uLlxuXHQgKi9cblx0QE91dHB1dCgpIGNsaWNrID0gbmV3IEV2ZW50RW1pdHRlcjx7IGFjdGlvbjogXCJjbGlja1wiIHwgXCJjbG9zZVwiIH0+KCk7XG5cblx0b25DbGljayhldmVudDogYW55KSB7XG5cdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0aWYgKCF0aGlzLmRpc2FibGVkKSB7XG5cdFx0XHR0aGlzLmNsaWNrLmVtaXQoeyBhY3Rpb246IFwiY2xpY2tcIiB9KTtcblx0XHR9XG5cdH1cblxuXHRvbkNsb3NlKGV2ZW50OiBhbnkpIHtcblx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHR0aGlzLmNsaWNrLmVtaXQoeyBhY3Rpb246IFwiY2xvc2VcIiB9KTtcblx0XHR0aGlzLmNsb3NlLmVtaXQoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAdG9kb1xuXHQgKiBSZW1vdmUgYGNkcy0tdGFnLS0ke3RoaXMuc2l6ZX1gIGluIHY3XG5cdCAqL1xuXHRASG9zdEJpbmRpbmcoXCJhdHRyLmNsYXNzXCIpIGdldCBhdHRyQ2xhc3MoKSB7XG5cdFx0Y29uc3QgZGlzYWJsZWRDbGFzcyA9IHRoaXMuZGlzYWJsZWQgPyBcImNkcy0tdGFnLS1kaXNhYmxlZFwiIDogXCJcIjtcblx0XHRjb25zdCBzaXplQ2xhc3MgPSBgY2RzLS10YWctLSR7dGhpcy5zaXplfSBjZHMtLWxheW91dC0tc2l6ZS0ke3RoaXMuc2l6ZX1gO1xuXHRcdGNvbnN0IHNrZWxldG9uQ2xhc3MgPSB0aGlzLnNrZWxldG9uID8gXCJjZHMtLXNrZWxldG9uXCIgOiBcIlwiO1xuXG5cdFx0cmV0dXJuIGBjZHMtLXRhZyBjZHMtLXRhZy0tZmlsdGVyIGNkcy0tdGFnLS0ke3RoaXMudHlwZX0gJHtkaXNhYmxlZENsYXNzfSAke3NpemVDbGFzc30gJHtza2VsZXRvbkNsYXNzfSAke3RoaXMuY2xhc3N9YDtcblx0fVxuXG5cdEBIb3N0QmluZGluZyhcImF0dHIuYXJpYS1sYWJlbFwiKSBnZXQgYXR0ckFyaWFMYWJlbCgpIHtcblx0XHRyZXR1cm4gYCR7dGhpcy50aXRsZSB8fCBcIlwifSAke3RoaXMuY2xvc2VCdXR0b25MYWJlbH1gLnRyaW0oKTtcblx0fVxufVxuIl19