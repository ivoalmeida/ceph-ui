import { Directive, HostBinding, Input } from "@angular/core";
import * as i0 from "@angular/core";
export class PasswordInput {
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.passwordInputClass = true;
        this.inputClass = true;
        this.invalid = false;
        this.warn = false;
        this.skeleton = false;
        /**
         * @deprecated since v5 - Use `cdsLayer` directive instead
         * `light` or `dark` input theme
         */
        this.theme = "dark";
        /**
         * Input field render size
         */
        this.size = "md";
        this._type = "password";
    }
    set type(type) {
        if (type) {
            this._type = type;
            if (this.elementRef) {
                this.renderer.setAttribute(this.elementRef.nativeElement, "type", this._type);
            }
        }
    }
    /**
     * @todo - remove `cds--text-input--${size}` classes in v12
     */
    get isSizeSm() {
        return this.size === "sm";
    }
    get isSizeMd() {
        return this.size === "md";
    }
    get isSizelg() {
        return this.size === "lg";
    }
    // Size
    get sizeSm() {
        return this.size === "sm";
    }
    get sizeMd() {
        return this.size === "md";
    }
    get sizelg() {
        return this.size === "lg";
    }
    get isLightTheme() {
        return this.theme === "light";
    }
    get getInvalidAttribute() {
        return this.invalid ? true : undefined;
    }
    ngAfterViewInit() {
        this.renderer.setAttribute(this.elementRef.nativeElement, "type", this._type);
    }
}
PasswordInput.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: PasswordInput, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
PasswordInput.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.3.0", type: PasswordInput, selector: "[cdsPassword], [ibmPassword]", inputs: { type: "type", invalid: "invalid", warn: "warn", skeleton: "skeleton", theme: "theme", size: "size" }, host: { properties: { "class.cds--password-input": "this.passwordInputClass", "class.cds--text-input--sm": "this.isSizeSm", "class.cds--text-input--md": "this.isSizeMd", "class.cds--text-input--lg": "this.isSizelg", "class.cds--layout--size-sm": "this.sizeSm", "class.cds--layout--size-md": "this.sizeMd", "class.cds--layout--size-lg": "this.sizelg", "class.cds--text-input--light": "this.isLightTheme", "class.cds--text-input": "this.inputClass", "class.cds--text-input--invalid": "this.invalid", "class.cds--text-input--warning": "this.warn", "class.cds--skeleton": "this.skeleton", "attr.data-invalid": "this.getInvalidAttribute" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: PasswordInput, decorators: [{
            type: Directive,
            args: [{
                    selector: "[cdsPassword], [ibmPassword]"
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { type: [{
                type: Input
            }], passwordInputClass: [{
                type: HostBinding,
                args: ["class.cds--password-input"]
            }], isSizeSm: [{
                type: HostBinding,
                args: ["class.cds--text-input--sm"]
            }], isSizeMd: [{
                type: HostBinding,
                args: ["class.cds--text-input--md"]
            }], isSizelg: [{
                type: HostBinding,
                args: ["class.cds--text-input--lg"]
            }], sizeSm: [{
                type: HostBinding,
                args: ["class.cds--layout--size-sm"]
            }], sizeMd: [{
                type: HostBinding,
                args: ["class.cds--layout--size-md"]
            }], sizelg: [{
                type: HostBinding,
                args: ["class.cds--layout--size-lg"]
            }], isLightTheme: [{
                type: HostBinding,
                args: ["class.cds--text-input--light"]
            }], inputClass: [{
                type: HostBinding,
                args: ["class.cds--text-input"]
            }], invalid: [{
                type: HostBinding,
                args: ["class.cds--text-input--invalid"]
            }, {
                type: Input
            }], warn: [{
                type: HostBinding,
                args: ["class.cds--text-input--warning"]
            }, {
                type: Input
            }], skeleton: [{
                type: HostBinding,
                args: ["class.cds--skeleton"]
            }, {
                type: Input
            }], theme: [{
                type: Input
            }], size: [{
                type: Input
            }], getInvalidAttribute: [{
                type: HostBinding,
                args: ["attr.data-invalid"]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2lucHV0L3Bhc3N3b3JkLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULFdBQVcsRUFDWCxLQUFLLEVBSUwsTUFBTSxlQUFlLENBQUM7O0FBS3ZCLE1BQU0sT0FBTyxhQUFhO0lBNkR6QixZQUFzQixVQUFzQixFQUFZLFFBQW1CO1FBQXJELGVBQVUsR0FBVixVQUFVLENBQVk7UUFBWSxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBbkRqQyx1QkFBa0IsR0FBRyxJQUFJLENBQUM7UUE2QjlCLGVBQVUsR0FBRyxJQUFJLENBQUM7UUFDQSxZQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ2hCLFNBQUksR0FBRyxLQUFLLENBQUM7UUFDeEIsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUU5RDs7O1dBR0c7UUFDTSxVQUFLLEdBQXFCLE1BQU0sQ0FBQztRQUUxQzs7V0FFRztRQUNNLFNBQUksR0FBdUIsSUFBSSxDQUFDO1FBTWpDLFVBQUssR0FBRyxVQUFVLENBQUM7SUFFb0QsQ0FBQztJQTNEaEYsSUFBYSxJQUFJLENBQUMsSUFBWTtRQUM3QixJQUFJLElBQUksRUFBRTtZQUNULElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1lBQ2xCLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDcEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUM5RTtTQUNEO0lBQ0YsQ0FBQztJQUdEOztPQUVHO0lBQ0gsSUFBOEMsUUFBUTtRQUNyRCxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDO0lBQzNCLENBQUM7SUFDRCxJQUE4QyxRQUFRO1FBQ3JELE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUM7SUFDM0IsQ0FBQztJQUNELElBQThDLFFBQVE7UUFDckQsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQztJQUMzQixDQUFDO0lBRUQsT0FBTztJQUNQLElBQStDLE1BQU07UUFDcEQsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQztJQUMzQixDQUFDO0lBQ0QsSUFBK0MsTUFBTTtRQUNwRCxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDO0lBQzNCLENBQUM7SUFDRCxJQUErQyxNQUFNO1FBQ3BELE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUM7SUFDM0IsQ0FBQztJQUNELElBQWlELFlBQVk7UUFDNUQsT0FBTyxJQUFJLENBQUMsS0FBSyxLQUFLLE9BQU8sQ0FBQztJQUMvQixDQUFDO0lBa0JELElBQXNDLG1CQUFtQjtRQUN4RCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0lBQ3hDLENBQUM7SUFNRCxlQUFlO1FBQ2QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMvRSxDQUFDOzswR0FqRVcsYUFBYTs4RkFBYixhQUFhOzJGQUFiLGFBQWE7a0JBSHpCLFNBQVM7bUJBQUM7b0JBQ1YsUUFBUSxFQUFFLDhCQUE4QjtpQkFDeEM7eUhBR2EsSUFBSTtzQkFBaEIsS0FBSztnQkFRb0Msa0JBQWtCO3NCQUEzRCxXQUFXO3VCQUFDLDJCQUEyQjtnQkFLTSxRQUFRO3NCQUFyRCxXQUFXO3VCQUFDLDJCQUEyQjtnQkFHTSxRQUFRO3NCQUFyRCxXQUFXO3VCQUFDLDJCQUEyQjtnQkFHTSxRQUFRO3NCQUFyRCxXQUFXO3VCQUFDLDJCQUEyQjtnQkFLTyxNQUFNO3NCQUFwRCxXQUFXO3VCQUFDLDRCQUE0QjtnQkFHTSxNQUFNO3NCQUFwRCxXQUFXO3VCQUFDLDRCQUE0QjtnQkFHTSxNQUFNO3NCQUFwRCxXQUFXO3VCQUFDLDRCQUE0QjtnQkFHUSxZQUFZO3NCQUE1RCxXQUFXO3VCQUFDLDhCQUE4QjtnQkFJTCxVQUFVO3NCQUEvQyxXQUFXO3VCQUFDLHVCQUF1QjtnQkFDb0IsT0FBTztzQkFBOUQsV0FBVzt1QkFBQyxnQ0FBZ0M7O3NCQUFHLEtBQUs7Z0JBQ0csSUFBSTtzQkFBM0QsV0FBVzt1QkFBQyxnQ0FBZ0M7O3NCQUFHLEtBQUs7Z0JBQ1IsUUFBUTtzQkFBcEQsV0FBVzt1QkFBQyxxQkFBcUI7O3NCQUFHLEtBQUs7Z0JBTWpDLEtBQUs7c0JBQWIsS0FBSztnQkFLRyxJQUFJO3NCQUFaLEtBQUs7Z0JBRWdDLG1CQUFtQjtzQkFBeEQsV0FBVzt1QkFBQyxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHREaXJlY3RpdmUsXG5cdEhvc3RCaW5kaW5nLFxuXHRJbnB1dCxcblx0UmVuZGVyZXIyLFxuXHRFbGVtZW50UmVmLFxuXHRBZnRlclZpZXdJbml0XG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogXCJbY2RzUGFzc3dvcmRdLCBbaWJtUGFzc3dvcmRdXCJcbn0pXG5leHBvcnQgY2xhc3MgUGFzc3dvcmRJbnB1dCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuXG5cdEBJbnB1dCgpIHNldCB0eXBlKHR5cGU6IHN0cmluZykge1xuXHRcdGlmICh0eXBlKSB7XG5cdFx0XHR0aGlzLl90eXBlID0gdHlwZTtcblx0XHRcdGlmICh0aGlzLmVsZW1lbnRSZWYpIHtcblx0XHRcdFx0dGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIFwidHlwZVwiLCB0aGlzLl90eXBlKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuY2RzLS1wYXNzd29yZC1pbnB1dFwiKSBwYXNzd29yZElucHV0Q2xhc3MgPSB0cnVlO1xuXG5cdC8qKlxuXHQgKiBAdG9kbyAtIHJlbW92ZSBgY2RzLS10ZXh0LWlucHV0LS0ke3NpemV9YCBjbGFzc2VzIGluIHYxMlxuXHQgKi9cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuY2RzLS10ZXh0LWlucHV0LS1zbVwiKSBnZXQgaXNTaXplU20oKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2l6ZSA9PT0gXCJzbVwiO1xuXHR9XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmNkcy0tdGV4dC1pbnB1dC0tbWRcIikgZ2V0IGlzU2l6ZU1kKCkge1xuXHRcdHJldHVybiB0aGlzLnNpemUgPT09IFwibWRcIjtcblx0fVxuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5jZHMtLXRleHQtaW5wdXQtLWxnXCIpIGdldCBpc1NpemVsZygpIHtcblx0XHRyZXR1cm4gdGhpcy5zaXplID09PSBcImxnXCI7XG5cdH1cblxuXHQvLyBTaXplXG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmNkcy0tbGF5b3V0LS1zaXplLXNtXCIpIGdldCBzaXplU20oKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2l6ZSA9PT0gXCJzbVwiO1xuXHR9XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmNkcy0tbGF5b3V0LS1zaXplLW1kXCIpIGdldCBzaXplTWQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2l6ZSA9PT0gXCJtZFwiO1xuXHR9XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmNkcy0tbGF5b3V0LS1zaXplLWxnXCIpIGdldCBzaXplbGcoKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2l6ZSA9PT0gXCJsZ1wiO1xuXHR9XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmNkcy0tdGV4dC1pbnB1dC0tbGlnaHRcIikgZ2V0IGlzTGlnaHRUaGVtZSgpIHtcblx0XHRyZXR1cm4gdGhpcy50aGVtZSA9PT0gXCJsaWdodFwiO1xuXHR9XG5cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuY2RzLS10ZXh0LWlucHV0XCIpIGlucHV0Q2xhc3MgPSB0cnVlO1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5jZHMtLXRleHQtaW5wdXQtLWludmFsaWRcIikgQElucHV0KCkgaW52YWxpZCA9IGZhbHNlO1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5jZHMtLXRleHQtaW5wdXQtLXdhcm5pbmdcIikgQElucHV0KCkgd2FybiA9IGZhbHNlO1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5jZHMtLXNrZWxldG9uXCIpIEBJbnB1dCgpIHNrZWxldG9uID0gZmFsc2U7XG5cblx0LyoqXG5cdCAqIEBkZXByZWNhdGVkIHNpbmNlIHY1IC0gVXNlIGBjZHNMYXllcmAgZGlyZWN0aXZlIGluc3RlYWRcblx0ICogYGxpZ2h0YCBvciBgZGFya2AgaW5wdXQgdGhlbWVcblx0ICovXG5cdEBJbnB1dCgpIHRoZW1lOiBcImxpZ2h0XCIgfCBcImRhcmtcIiA9IFwiZGFya1wiO1xuXG5cdC8qKlxuXHQgKiBJbnB1dCBmaWVsZCByZW5kZXIgc2l6ZVxuXHQgKi9cblx0QElucHV0KCkgc2l6ZTogXCJzbVwiIHwgXCJtZFwiIHwgXCJsZ1wiID0gXCJtZFwiO1xuXG5cdEBIb3N0QmluZGluZyhcImF0dHIuZGF0YS1pbnZhbGlkXCIpIGdldCBnZXRJbnZhbGlkQXR0cmlidXRlKCkge1xuXHRcdHJldHVybiB0aGlzLmludmFsaWQgPyB0cnVlIDogdW5kZWZpbmVkO1xuXHR9XG5cblx0cHJpdmF0ZSBfdHlwZSA9IFwicGFzc3dvcmRcIjtcblxuXHRjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHsgfVxuXG5cdG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcblx0XHR0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgXCJ0eXBlXCIsIHRoaXMuX3R5cGUpO1xuXHR9XG59XG4iXX0=