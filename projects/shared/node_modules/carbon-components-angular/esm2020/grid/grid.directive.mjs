import { ContentChildren, Directive, HostBinding, Input, Optional, SkipSelf } from "@angular/core";
import { Subscription } from "rxjs";
import { GridService } from "./grid.service";
import * as i0 from "@angular/core";
import * as i1 from "./grid.service";
/**
 * Get started with importing the module:
 *
 * ```typescript
 * import { GridModule } from 'carbon-components-angular';
 * ```
 *
 * [See demo](../../?path=/story/components-grid--basic)
 */
export class GridDirective {
    constructor(gridService) {
        this.gridService = gridService;
        /**
         * Set to `true` to condense the grid
         */
        this.condensed = false;
        /**
         * Set to `true` to use narrow grid
         */
        this.narrow = false;
        /**
         * Set to `true` to use the full width
         */
        this.fullWidth = false;
        this.cssGridEnabled = false;
        this.isSubgrid = false;
        this.subscription = new Subscription();
    }
    /**
     * Set to `true` to use css grid
     */
    set useCssGrid(enable) {
        this.cssGridEnabled = enable;
        this.gridService.updateGridType(enable);
    }
    // Flex grid
    get flexGrid() {
        return !this.cssGridEnabled;
    }
    get flexCondensed() {
        return !this.cssGridEnabled && this.condensed;
    }
    get flexNarrow() {
        return !this.cssGridEnabled && this.narrow;
    }
    get flexFullWidth() {
        return !this.cssGridEnabled && this.fullWidth;
    }
    // CSS Grid
    get ccsGrid() {
        return this.cssGridEnabled && !this.isSubgrid;
    }
    get ccsCondensed() {
        return this.cssGridEnabled && !this.isSubgrid && this.condensed;
    }
    get ccsNarrow() {
        return this.cssGridEnabled && !this.isSubgrid && this.narrow;
    }
    get ccsFullWidth() {
        return this.cssGridEnabled && !this.isSubgrid && this.fullWidth;
    }
    // CSS Sub Grid
    get subGrid() {
        return this.cssGridEnabled && this.isSubgrid;
    }
    get subCondensed() {
        return this.cssGridEnabled && this.isSubgrid && this.condensed;
    }
    get subNarrow() {
        return this.cssGridEnabled && this.isSubgrid && this.narrow;
    }
    get subFullWidth() {
        return this.cssGridEnabled && this.isSubgrid && this.fullWidth;
    }
    ngOnInit() {
        this.subscription = this.gridService.gridObservable.subscribe((isCssGrid) => {
            this.cssGridEnabled = isCssGrid;
        });
    }
    // Make all children grids a sub grid
    set cssGridChildren(list) {
        if (this.cssGridEnabled) {
            list.forEach((grid) => {
                // Prevents initial (parent) grid element from being turned into a subgrid
                if (grid === this) {
                    return;
                }
                grid.isSubgrid = true;
            });
        }
    }
    /**
     * Unsubscribe from Grid Service subscription
     */
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}
GridDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: GridDirective, deps: [{ token: i1.GridService }], target: i0.ɵɵFactoryTarget.Directive });
GridDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.3.0", type: GridDirective, selector: "[cdsGrid], [ibmGrid]", inputs: { condensed: "condensed", narrow: "narrow", fullWidth: "fullWidth", useCssGrid: "useCssGrid" }, host: { properties: { "class.cds--grid": "this.flexGrid", "class.cds--grid--condensed": "this.flexCondensed", "class.cds--grid--narrow": "this.flexNarrow", "class.cds--grid--full-width": "this.flexFullWidth", "class.cds--css-grid": "this.ccsGrid", "class.cds--css-grid--condensed": "this.ccsCondensed", "class.cds--css-grid--narrow": "this.ccsNarrow", "class.cds--css-grid--full-width": "this.ccsFullWidth", "class.cds--subgrid": "this.subGrid", "class.cds--subgrid--condensed": "this.subCondensed", "class.cds--subgrid--narrow": "this.subNarrow", "class.cds--subgrid--wide": "this.subFullWidth" } }, providers: [
        {
            provide: GridService,
            deps: [[new Optional(), new SkipSelf(), GridService]],
            useFactory: (parentService) => {
                return parentService || new GridService();
            }
        }
    ], queries: [{ propertyName: "cssGridChildren", predicate: GridDirective, descendants: true }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: GridDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: "[cdsGrid], [ibmGrid]",
                    providers: [
                        {
                            provide: GridService,
                            deps: [[new Optional(), new SkipSelf(), GridService]],
                            useFactory: (parentService) => {
                                return parentService || new GridService();
                            }
                        }
                    ]
                }]
        }], ctorParameters: function () { return [{ type: i1.GridService }]; }, propDecorators: { condensed: [{
                type: Input
            }], narrow: [{
                type: Input
            }], fullWidth: [{
                type: Input
            }], useCssGrid: [{
                type: Input
            }], flexGrid: [{
                type: HostBinding,
                args: ["class.cds--grid"]
            }], flexCondensed: [{
                type: HostBinding,
                args: ["class.cds--grid--condensed"]
            }], flexNarrow: [{
                type: HostBinding,
                args: ["class.cds--grid--narrow"]
            }], flexFullWidth: [{
                type: HostBinding,
                args: ["class.cds--grid--full-width"]
            }], ccsGrid: [{
                type: HostBinding,
                args: ["class.cds--css-grid"]
            }], ccsCondensed: [{
                type: HostBinding,
                args: ["class.cds--css-grid--condensed"]
            }], ccsNarrow: [{
                type: HostBinding,
                args: ["class.cds--css-grid--narrow"]
            }], ccsFullWidth: [{
                type: HostBinding,
                args: ["class.cds--css-grid--full-width"]
            }], subGrid: [{
                type: HostBinding,
                args: ["class.cds--subgrid"]
            }], subCondensed: [{
                type: HostBinding,
                args: ["class.cds--subgrid--condensed"]
            }], subNarrow: [{
                type: HostBinding,
                args: ["class.cds--subgrid--narrow"]
            }], subFullWidth: [{
                type: HostBinding,
                args: ["class.cds--subgrid--wide"]
            }], cssGridChildren: [{
                type: ContentChildren,
                args: [GridDirective, { descendants: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,